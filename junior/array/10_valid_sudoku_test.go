package array

import (
	"fmt"
	"testing"
)

/*
有效的数独
请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

数字1-9在每一行只能出现一次。
数字1-9在每一列只能出现一次。
数字1-9在每一个以粗实线分隔的3x3宫内只能出现一次。（请参考示例图）
数独部分空格内已填入了数字，空白格用'.'表示。

注意：

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。

示例 1：
https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/12/250px-sudoku-by-l2g-20050714svg.png

输入：board =
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：true
示例 2：

输入：board =
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：false
解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

提示：

board.length == 9
board[i].length == 9
board[i][j] 是一位数字或者 '.'

作者：力扣 (LeetCode)
链接：https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2f9gg/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
*/
func IsValidSudoku(board [][]byte) bool {
	// 每一行判断是否通过
	for i := 0; i < len(board); i++ {
		m := make(map[byte]struct{}, 9)
		for _, b := range board[i] {
			if b == '.' {
				continue
			}
			if _, ok := m[b]; ok {
				return false
			}
			m[b] = struct{}{}
		}
	}

	// 判断每一列是否通过
	for i := 0; i < 9; i++ {
		m := make(map[byte]struct{}, 9)
		for j := 0; j < 9; j++ {
			if board[j][i] == '.' {
				continue
			}
			if _, ok := m[board[j][i]]; ok {
				return false
			}
			m[board[j][i]] = struct{}{}
		}
	}
	// 判断方块是否通过
	for i := 0; i < 3; i++ {
		for j := 0; j < 3; j++ {
			m := make(map[byte]struct{}, 9)
			for k := 0; k < 9; k++ {
				if board[3*i+k/3][3*j+k%3] == '.' {
					continue
				}
				if _, ok := m[board[3*i+k/3][3*j+k%3]]; ok {
					return false
				}
				m[board[3*i+k/3][3*j+k%3]] = struct{}{}
			}
		}
	}

	return true
}
func TestIsValidSudoku(t *testing.T) {
	//nums := []int{0, 1, 1}
	nums := [][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}
	has := IsValidSudoku(nums)
	fmt.Println(has)
}
